//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ShuangZanModelDBContainer : DbContext
    {
        public ShuangZanModelDBContainer()
            : base("name=ShuangZanModelDBContainer")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<UserInfo> UserInfo { get; set; }
        public virtual DbSet<ActionInfo> ActionInfo { get; set; }
        public virtual DbSet<RoleInfo> RoleInfo { get; set; }
        public virtual DbSet<R_UserInfo_ActionInfo> R_UserInfo_ActionInfo { get; set; }
        public virtual DbSet<PackageCard> PackageCard { get; set; }
        public virtual DbSet<PersonalUser> PersonalUser { get; set; }
        public virtual DbSet<UserMessage> UserMessage { get; set; }
        public virtual DbSet<OpenService> OpenService { get; set; }
        public virtual DbSet<KeyWords> KeyWords { get; set; }
        public virtual DbSet<Tests> Tests { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<Feedback> Feedback { get; set; }
        public virtual DbSet<GameDemoRecharge> GameDemoRecharge { get; set; }
        public virtual DbSet<GameDemoAccounts> GameDemoAccounts { get; set; }
        public virtual DbSet<GameDemoRequires> GameDemoRequires { get; set; }
        public virtual DbSet<Package> Package { get; set; }
        public virtual DbSet<UserRaiders> UserRaiders { get; set; }
        public virtual DbSet<GameDemo> GameDemo { get; set; }
        public virtual DbSet<CompanyGame> CompanyGame { get; set; }
        public virtual DbSet<Recharge> Recharge { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<RechargedUsed> RechargedUsed { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<AuditLog> AuditLog { get; set; }
        public virtual DbSet<VerificationCode> VerificationCode { get; set; }
        public virtual DbSet<DemoUser> DemoUser { get; set; }
        public virtual DbSet<PersonalUserSign> PersonalUserSign { get; set; }
        public virtual DbSet<PersonalUserSignDetail> PersonalUserSignDetail { get; set; }
        public virtual DbSet<SeeNews> SeeNews { get; set; }
        public virtual DbSet<LeaveMsg> LeaveMsg { get; set; }
        public virtual DbSet<ForbiddenList> ForbiddenList { get; set; }
        public virtual DbSet<Game> Game { get; set; }
        public virtual DbSet<HomePage> HomePage { get; set; }
        public virtual DbSet<BlackListIP> BlackListIP { get; set; }
        public virtual DbSet<WonderfulTxtImg> WonderfulTxtImg { get; set; }
        public virtual DbSet<Seo> Seo { get; set; }
        public virtual DbSet<BeautifulGirls> BeautifulGirls { get; set; }
        public virtual DbSet<Advertisement> Advertisement { get; set; }
        public virtual DbSet<Gift> Gift { get; set; }
        public virtual DbSet<UserAdress> UserAdress { get; set; }
    
        public virtual int DemosAdd(string gamename, string img, string accounts, string requires, ObjectParameter err)
        {
            var gamenameParameter = gamename != null ?
                new ObjectParameter("gamename", gamename) :
                new ObjectParameter("gamename", typeof(string));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(string));
    
            var accountsParameter = accounts != null ?
                new ObjectParameter("accounts", accounts) :
                new ObjectParameter("accounts", typeof(string));
    
            var requiresParameter = requires != null ?
                new ObjectParameter("requires", requires) :
                new ObjectParameter("requires", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DemosAdd", gamenameParameter, imgParameter, accountsParameter, requiresParameter, err);
        }
    
        public virtual int DemosConfirm(Nullable<int> demoid, Nullable<int> accountid, Nullable<int> requireid, Nullable<int> userid, Nullable<int> state, string reason, ObjectParameter err)
        {
            var demoidParameter = demoid.HasValue ?
                new ObjectParameter("demoid", demoid) :
                new ObjectParameter("demoid", typeof(int));
    
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("accountid", accountid) :
                new ObjectParameter("accountid", typeof(int));
    
            var requireidParameter = requireid.HasValue ?
                new ObjectParameter("requireid", requireid) :
                new ObjectParameter("requireid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DemosConfirm", demoidParameter, accountidParameter, requireidParameter, useridParameter, stateParameter, reasonParameter, err);
        }
    
        public virtual int DemosDole(Nullable<int> demoid, Nullable<int> userid, string sname, string userarea, string usercity, ObjectParameter uname, ObjectParameter pass, ObjectParameter systemname, ObjectParameter url, ObjectParameter err)
        {
            var demoidParameter = demoid.HasValue ?
                new ObjectParameter("demoid", demoid) :
                new ObjectParameter("demoid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var snameParameter = sname != null ?
                new ObjectParameter("sname", sname) :
                new ObjectParameter("sname", typeof(string));
    
            var userareaParameter = userarea != null ?
                new ObjectParameter("userarea", userarea) :
                new ObjectParameter("userarea", typeof(string));
    
            var usercityParameter = usercity != null ?
                new ObjectParameter("usercity", usercity) :
                new ObjectParameter("usercity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DemosDole", demoidParameter, useridParameter, snameParameter, userareaParameter, usercityParameter, uname, pass, systemname, url, err);
        }
    
        public virtual int DemosRecharge(Nullable<int> demoid, Nullable<int> accountid, Nullable<int> userid, Nullable<int> pay, string memo, ObjectParameter err)
        {
            var demoidParameter = demoid.HasValue ?
                new ObjectParameter("demoid", demoid) :
                new ObjectParameter("demoid", typeof(int));
    
            var accountidParameter = accountid.HasValue ?
                new ObjectParameter("accountid", accountid) :
                new ObjectParameter("accountid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var payParameter = pay.HasValue ?
                new ObjectParameter("pay", pay) :
                new ObjectParameter("pay", typeof(int));
    
            var memoParameter = memo != null ?
                new ObjectParameter("memo", memo) :
                new ObjectParameter("memo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DemosRecharge", demoidParameter, accountidParameter, useridParameter, payParameter, memoParameter, err);
        }
    
        public virtual int exchangeGift(Nullable<int> userid, Nullable<int> giftid, Nullable<int> addressid, Nullable<int> num, string color, ObjectParameter orderid, ObjectParameter err)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var giftidParameter = giftid.HasValue ?
                new ObjectParameter("giftid", giftid) :
                new ObjectParameter("giftid", typeof(int));
    
            var addressidParameter = addressid.HasValue ?
                new ObjectParameter("addressid", addressid) :
                new ObjectParameter("addressid", typeof(int));
    
            var numParameter = num.HasValue ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("exchangeGift", useridParameter, giftidParameter, addressidParameter, numParameter, colorParameter, orderid, err);
        }
    
        public virtual int ManageLogin(string uname, string pass, ObjectParameter err)
        {
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageLogin", unameParameter, passParameter, err);
        }
    
        public virtual int RegionUser(string uname, string pass, string mobile, string code, Nullable<int> tjid, ObjectParameter err)
        {
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var tjidParameter = tjid.HasValue ?
                new ObjectParameter("tjid", tjid) :
                new ObjectParameter("tjid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegionUser", unameParameter, passParameter, mobileParameter, codeParameter, tjidParameter, err);
        }
    
        public virtual int SendVCode(string mobile, string code, string ip, ObjectParameter outCode)
        {
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendVCode", mobileParameter, codeParameter, ipParameter, outCode);
        }
    
        public virtual int ServerAdd(Nullable<int> companyid, string gamename, string starttime, string servername, string url, Nullable<int> packageid, Nullable<int> rec_hot, ObjectParameter outstr)
        {
            var companyidParameter = companyid.HasValue ?
                new ObjectParameter("companyid", companyid) :
                new ObjectParameter("companyid", typeof(int));
    
            var gamenameParameter = gamename != null ?
                new ObjectParameter("gamename", gamename) :
                new ObjectParameter("gamename", typeof(string));
    
            var starttimeParameter = starttime != null ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(string));
    
            var servernameParameter = servername != null ?
                new ObjectParameter("servername", servername) :
                new ObjectParameter("servername", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var packageidParameter = packageid.HasValue ?
                new ObjectParameter("packageid", packageid) :
                new ObjectParameter("packageid", typeof(int));
    
            var rec_hotParameter = rec_hot.HasValue ?
                new ObjectParameter("rec_hot", rec_hot) :
                new ObjectParameter("rec_hot", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ServerAdd", companyidParameter, gamenameParameter, starttimeParameter, servernameParameter, urlParameter, packageidParameter, rec_hotParameter, outstr);
        }
    
        public virtual int ServerDel(Nullable<int> serverid)
        {
            var serveridParameter = serverid.HasValue ?
                new ObjectParameter("serverid", serverid) :
                new ObjectParameter("serverid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ServerDel", serveridParameter);
        }
    
        public virtual int ServerVerified(Nullable<int> serverid, Nullable<int> check, ObjectParameter outstr)
        {
            var serveridParameter = serverid.HasValue ?
                new ObjectParameter("serverid", serverid) :
                new ObjectParameter("serverid", typeof(int));
    
            var checkParameter = check.HasValue ?
                new ObjectParameter("check", check) :
                new ObjectParameter("check", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ServerVerified", serveridParameter, checkParameter, outstr);
        }
    
        public virtual int Sign(Nullable<int> userid, Nullable<int> p, ObjectParameter num, ObjectParameter signHistory)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var pParameter = p.HasValue ?
                new ObjectParameter("p", p) :
                new ObjectParameter("p", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sign", useridParameter, pParameter, num, signHistory);
        }
    
        [DbFunction("ShuangZanModelDBContainer", "Split_Id")]
        public virtual IQueryable<Nullable<int>> Split_Id(string str, string separator)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("separator", separator) :
                new ObjectParameter("separator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[ShuangZanModelDBContainer].[Split_Id](@str, @separator)", strParameter, separatorParameter);
        }
    
        [DbFunction("ShuangZanModelDBContainer", "Split_Id_String")]
        public virtual IQueryable<Split_Id_String_Result> Split_Id_String(string str, string separator, string subseparator)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("separator", separator) :
                new ObjectParameter("separator", typeof(string));
    
            var subseparatorParameter = subseparator != null ?
                new ObjectParameter("subseparator", subseparator) :
                new ObjectParameter("subseparator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Id_String_Result>("[ShuangZanModelDBContainer].[Split_Id_String](@str, @separator, @subseparator)", strParameter, separatorParameter, subseparatorParameter);
        }
    
        [DbFunction("ShuangZanModelDBContainer", "Split_String")]
        public virtual IQueryable<string> Split_String(string str, string separator)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("separator", separator) :
                new ObjectParameter("separator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[ShuangZanModelDBContainer].[Split_String](@str, @separator)", strParameter, separatorParameter);
        }
    
        [DbFunction("ShuangZanModelDBContainer", "Split_String_String")]
        public virtual IQueryable<Split_String_String_Result> Split_String_String(string str, string separator, string subseparator)
        {
            var strParameter = str != null ?
                new ObjectParameter("str", str) :
                new ObjectParameter("str", typeof(string));
    
            var separatorParameter = separator != null ?
                new ObjectParameter("separator", separator) :
                new ObjectParameter("separator", typeof(string));
    
            var subseparatorParameter = subseparator != null ?
                new ObjectParameter("subseparator", subseparator) :
                new ObjectParameter("subseparator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_String_String_Result>("[ShuangZanModelDBContainer].[Split_String_String](@str, @separator, @subseparator)", strParameter, separatorParameter, subseparatorParameter);
        }
    
        public virtual int UserGetPass(string mobile, string code, ObjectParameter pass, ObjectParameter err)
        {
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserGetPass", mobileParameter, codeParameter, pass, err);
        }
    }
}
